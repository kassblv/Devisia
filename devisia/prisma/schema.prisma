// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modèles pour l'application de génération de devis

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  companyName   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quotes        Quote[]
  clients       Client[]
  subscriptions Subscription[]
  
  @@map("users")
}

model Client {
  id            String    @id @default(uuid())
  name          String
  email         String
  phone         String?
  company       String?
  address       String?
  kbis          String?
  vatNumber     String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes        Quote[]   // Relation avec les devis
  
  @@map("clients")
}

model Quote {
  id              String        @id @default(uuid())
  quoteNumber     String        @unique
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          QuoteStatus   @default(DRAFT)
  expiryDate      DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId        String?
  client          Client?       @relation(fields: [clientId], references: [id])
  items           QuoteItem[]
  
  // Champs supplémentaires pour les données métier
  metadata        String?       // Stockage JSON pour données additionnelles (materiaux, postes, etc.)
  projet          String?       // Nom ou titre du projet

  // Champs de secours au cas où le client serait supprimé
  clientName      String?
  clientEmail     String?
  clientCompany   String?
  clientPhone     String?
  
  @@map("quotes")
}

model QuoteItem {
  id              String    @id @default(uuid())
  description     String
  quantity        Int
  unitPrice       Decimal   @db.Decimal(10, 2)
  taxRate         Decimal?  @db.Decimal(5, 2)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  quoteId         String
  quote           Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  
  @@map("quote_items")
}

enum QuoteStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

// Modèles pour les abonnements

model SubscriptionPlan {
  id              String        @id @default(uuid())
  name            String        @unique
  description     String?
  price           Decimal       @db.Decimal(10, 2)
  interval        PlanInterval  @default(MONTHLY)
  features        String        // Stocké en JSON
  isActive        Boolean       @default(true)
  maxQuotes       Int           @default(0)
  maxClients      Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  subscriptions   Subscription[]
  
  @@map("subscription_plans")
}

model Subscription {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId          String
  plan            SubscriptionPlan @relation(fields: [planId], references: [id])
  status          SubStatus     @default(ACTIVE)
  startDate       DateTime      @default(now())
  endDate         DateTime?
  canceledAt      DateTime?
  trialEndsAt     DateTime?
  paymentId       String?       // ID de paiement externe (Stripe, etc.)
  metadata        String?       // Pour données supplémentaires (JSON)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("subscriptions")
}

enum PlanInterval {
  MONTHLY
  YEARLY
}

enum SubStatus {
  ACTIVE
  CANCELED
  EXPIRED
  TRIAL
  PAST_DUE
}
